npm init -y
npm install -D typescript
npx tsc --init
npm install prisma -g
prisma init
npx prisma generate
npx prisma migrate dev
npx prisma db push


// Script start command
"start": "ts-node-dev --respawn --transpile-only src/app.ts"







Docker Command's

First of all, I install WSL in PS.
1- wsl install (type command in cmd)

2- install docker.exe in PC.

Take Docker image pull from Docker-hub.
3- docker pull hello-world.

Then, Run 'hello-world' image as docker container(when image is run, then container create).
4- docker run hello-world

check how much docker container is runing
5- docker ps

stop specific runing container.
6- docker stop container_id.

stop all runing container
7- docker kill $(docker ps -q)

delete docker image 
8- docker rmi <image_id>
   docker rmi -f <image_id>      // delete image forcely


Docker working:

Docker-File  -->  Docker-Image  -->  Docker-Container 


Push at Docker Hub:

make a tag
1- docker tag my-image my-username/my-image:v1.0

then login in terminal
2- docker login

push at docker hub
3- docker push my-username/my-image:v1.0


Run Docker Compose(yml) file:
docker compose up -d

Stop Docker Compose file:
docker compose down




Create own Docker Image
1- first write dockerfile

run command to make a build image
2- docker build -t my-app .

run command to run build-image
3- docker run -d -p 2000:3000 <image-name> 

docker compose -f docker-compose.dev.yml up -d
docker compose -f docker-compose.dev.yml up --build




// Vercel CLI 

1- npm i -g vercel
2- vercel              // this is used for dev development
3- vercel --prod       // this is used for production development




// Eslint

1- npm init @eslint/config
2- npm i -D prettier


 
                                             // Git and github 

1- git log --oneline 



Branches and merging: 

0- git branch -a 	#all local and remote(live) branches are listed
   git branch -r 	#remote branches are listed
   git branch 		#only local branches are listed                       

1- git checkout -b <branch-name>        // first create new-branch move quickly in new branch  
   git branch -b <branch-name>      // first create new-branch move quickly in new branch  
   git branch <branch-name>
 
2- git checkout <new-branch> 
   git switch <new-branch>

3- git branch -d <branch-name>         // The -d option will delete the branch only if it has already been            
                                          pushed merged with the remote branch
   git branch -D <branch-name>         // Use -D instead if you want to force the branch to be deleted, even if it    
                                          hasn't been pushed or merged yet

   git push -u origin --delete feature-c    // delete branch from github


4- git merge <branch-name>              // go first branch, in which you want to merge code then run command.


   Rebasing 

Diff:  Git Merge logs show you the complete history of commit merging. Git Rebase logs are linear. As the commits are  
       rebased, the history is altered to reflect this

5- git rebase main-branch 


Remote Repository:
=> Remote repositories are versions of your project that are hosted on the Internet or network somewhere
  
1- git remote 
   git remote -v  


Fetch and Pull: 
=>  tells the local repository that there are changes available in the remote repository without bringing the changes 
    into the local repository. Git Pull on the other hand brings the copy of the remote directory changes into the local repository


1- git fetch
   git pull 


Cherry-pick:
=> Cherry picking is the act of picking a commit from a branch and applying it to another, by commit hash. 
   this commit is copy from one branch and paste into another branch. 


1- git cherry-pick <commit-hash> 



Reset, revert, restore :

=> git checkout is used to discard the unstage-changes in the working repository or file 

1- git checkout <filename> or .   


=> unstage a file 
1-  git restore --staged <file-name> or .
    git reset HEAD <file-name> or .


=> remove latest commit
= Removes the commits from the local repository.

1- git reset HEAD~1            // remove commit, change come into unstaging area

2- git reset --soft HEAD~1     // remove commit, but change return in staging area

3- git reset --hard HEAD~1    // remove commit as well as chnages from the 
                                 working directory



=> remove the specific commit
= Removes the commits from the remote repository.

1- git revert <commit id of the commit that needs to be removed>



 Git command aliases:

 1- git config --global alias.alias-name 'original-git-command'

    git alias-name




Advance Git

1- Stash
git stash # To add changes to stash stack
git stash list # Shows list of stashed changes
git stash apply stash@{0} # Retrieve stash
git stash clear  // remove all stash 

# To save a stash with a message:
git stash push -m "my_stash_name"

# list stashes:
git stash list

# To pop (i.e. apply and drop) the nth stash:
git stash pop stash@{n}

#To apply the nth stash:
git stash apply stash@{n}

# To apply a stash by name:
git stash apply stash^{/my_stash_name}

e30IA0eioCDdUFA6EdbJPGoM